// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"

Drive::Drive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void Drive::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {
	float x = Robot::oi->getJoystick1()->GetX();
	float y = Robot::oi->getJoystick1()->GetY();
	float z = Robot::oi->getJoystick1()->GetZ();
	float a = Robot::oi->getJoystick1()->GetThrottle();

	//Delinerize
	x = Delinearize(x, a);
	y = Delinearize(y, a);
	z = Delinearize(z, a);

	//Deadband
	static float deadband = .5;

	if((x > deadband) && (x < -deadband)); //if it's not in the deadband, do nothing
	else x = 0;

	if((y > deadband) && (y < -deadband));
	else y = 0;

	if((z > deadband) && (z < -deadband));
	else z = 0;

	Robot::driveTrain->drive(x,y,z);
}

float Delinearize(float input, float alpha)
{
	return (alpha * input * input * input) + ((1-alpha) * input);
}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void Drive::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {

}
